generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["Core", "Workspace"]
}

//
// ===== Core Schema =====
//

model Workspace {
  id         String     @id @default(uuid())
  name       String
  created_by String
  created_at DateTime   @default(now())
  admin_id   String
  admin      Users      @relation(fields: [admin_id], references: [id])
  users      UserRole[]
  roles      Role[]
  Tickets    Tickets[]
  Comments   Comments[]
  History    History[]

  @@map("Workspace")
  @@schema("Core")
}

model Users {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  user_type   UserType
  is_active   Boolean   @default(true)
  mfa_enabled Boolean
  created_at  DateTime  @default(now())

  created_tickets  Tickets[]  @relation("TicketCreator")
  updated_tickets  Tickets[]  @relation("TicketUpdater")
  assigned_tickets Tickets[]  @relation("TicketAssignee")
  comments         Comments[] @relation("CommentAuthor")
  history_entries  History[]  @relation("ChangedBy")

  roles      UserRole[]
  workspaces Workspace[]
  MFACodes   MFACodes[]

  @@map("Users")
  @@schema("Core")
}

model Role {
  id           String           @id @default(uuid())
  workspace_id String
  workspace    Workspace        @relation(fields: [workspace_id], references: [id])
  name         String
  desc         String?
  permissions  RolePermission[]
  users        UserRole[]

  @@unique([workspace_id, name])
  @@map("Role")
  @@schema("Core")
}

model Permission {
  id        String           @id @default(uuid())
  entity    String
  operation Operation
  roles     RolePermission[]

  @@unique([entity, operation])
  @@map("Permission")
  @@schema("Core")
}

model RolePermission {
  id            String @id @default(uuid())
  role_id       String
  permission_id String

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@map("RolePermission")
  @@schema("Core")
}

model UserRole {
  id           String @id @default(uuid())
  user_id      String
  role_id      String
  workspace_id String

  user      Users     @relation(fields: [user_id], references: [id])
  role      Role      @relation(fields: [role_id], references: [id])
  workspace Workspace @relation(fields: [workspace_id], references: [id])

  @@map("UserRole")
  @@schema("Core")
}

model MFACodes {
  id      String @id @default(uuid())
  user_id String
  user    Users  @relation(fields: [user_id], references: [id])

  code       String
  created_at DateTime @default(now())

  @@map("MFACodes")
  @@schema("Core")
}

enum UserType {
  SUPER_ADMIN
  OTHER

  @@schema("Core")
}

enum Operation {
  CREATE
  READ
  UPDATE
  DELETE
  COMMENT
  MANAGE

  @@schema("Core")
}

//
// ===== Workspace Schema =====
//

model Tickets {
  id           String         @id @default(uuid())
  workspace_id String
  ticket_type  TicketType
  title        String
  desc         String
  status       TicketStatus
  priority     TicketPriority
  created_by   String
  created_at   DateTime       @default(now())
  updated_by   String?
  updated_at   DateTime?      @updatedAt
  due_date     DateTime?
  assigned_to  String
  parent_id    String?

  workspace       Workspace @relation(fields: [workspace_id], references: [id])
  created_by_user Users     @relation("TicketCreator", fields: [created_by], references: [id])
  updated_by_user Users?    @relation("TicketUpdater", fields: [updated_by], references: [id])
  assignee        Users     @relation("TicketAssignee", fields: [assigned_to], references: [id])

  parent   Tickets?   @relation("Subtasks", fields: [parent_id], references: [id])
  subtasks Tickets[]  @relation("Subtasks")
  comments Comments[]
  History  History[]

  @@map("Tickets")
  @@schema("Workspace")
}

model Comments {
  id           String   @id @default(uuid())
  workspace_id String
  ticket_id    String
  user_id      String
  message      String
  created_at   DateTime @default(now())
  parent_id    String?

  workspace Workspace  @relation(fields: [workspace_id], references: [id])
  ticket    Tickets    @relation(fields: [ticket_id], references: [id])
  user      Users      @relation("CommentAuthor", fields: [user_id], references: [id])
  parent    Comments?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies   Comments[] @relation("CommentReplies")

  @@map("Comments")
  @@schema("Workspace")
}

model History {
  id            String   @id @default(uuid())
  workspace_id  String
  ticket_id     String
  field_changed String
  old_value     String?
  new_value     String?
  changed_at    DateTime @default(now())
  action        String
  changed_by    String

  workspace       Workspace @relation(fields: [workspace_id], references: [id])
  ticket          Tickets   @relation(fields: [ticket_id], references: [id])
  changed_by_user Users @relation("ChangedBy", fields: [changed_by], references: [id])

  @@map("History")
  @@schema("Workspace")
}

enum TicketType {
  TASK
  RAID

  @@schema("Workspace")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  ON_HOLD

  @@schema("Workspace")
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("Workspace")
}
